name: Deploy Delaware Playwright Lambda

on:
  push:
    branches: [ main ]
    paths:
      - 'delaware_lambda_playwright.py'
      - 'Dockerfile-playwright'
      - 'requirements_playwright.txt'
      - 'buildspec-delaware-playwright.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-west-1
  ECR_REPOSITORY: delaware-playwright-lambda
  LAMBDA_FUNCTION_NAME: delaware-playwright-lambda

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Copy lambda function
        cp delaware_lambda_playwright.py simple_lambda.py
        
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile-playwright .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push image
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to Lambda
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Check if Lambda function exists
        if aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME --region $AWS_REGION >/dev/null 2>&1; then
          echo "Updating existing Lambda function..."
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --region $AWS_REGION
        else
          echo "Creating new Lambda function..."
          # Create IAM role if it doesn't exist
          aws iam get-role --role-name lambda-delaware-playwright-role >/dev/null 2>&1 || {
            aws iam create-role \
              --role-name lambda-delaware-playwright-role \
              --assume-role-policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }'
            aws iam attach-role-policy \
              --role-name lambda-delaware-playwright-role \
              --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            aws iam attach-role-policy \
              --role-name lambda-delaware-playwright-role \
              --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
            sleep 10
          }
          
          aws lambda create-function \
            --function-name $LAMBDA_FUNCTION_NAME \
            --package-type Image \
            --code ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --role arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/lambda-delaware-playwright-role \
            --timeout 300 \
            --memory-size 2048 \
            --region $AWS_REGION
        fi

    - name: Test Lambda Function
      run: |
        aws lambda invoke \
          --function-name $LAMBDA_FUNCTION_NAME \
          --payload '{"companyName": "Test Company LLC", "entityType": "LLC"}' \
          --region $AWS_REGION \
          response.json
        
        echo "Lambda test response:"
        cat response.json
