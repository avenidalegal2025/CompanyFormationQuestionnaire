version: 0.2
env:
  variables:
    AWS_ACCOUNT_ID: ""
    AWS_DEFAULT_REGION: "us-west-1"
    IMAGE_REPO_NAME: "delaware-playwright-lambda"
    IMAGE_TAG: "latest"
    LAMBDA_FUNCTION_NAME: "delaware-playwright-lambda"
phases:
  pre_build:
    commands:
      - echo Detecting AWS Account ID via STS...
      - export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo Build started on `date`
      - echo Building the Docker image...
  build:
    commands:
      - echo Building Docker image for Delaware Playwright...
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG -f Dockerfile-playwright .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"%s","imageUri":"%s"}]' $IMAGE_REPO_NAME $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG > imagedefinitions.json
      - echo Creating/updating Lambda function...
      - |
        if aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME --region $AWS_DEFAULT_REGION >/dev/null 2>&1; then
          echo "Updating existing Lambda function..."
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --image-uri $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG \
            --region $AWS_DEFAULT_REGION
        else
          echo "Creating new Lambda function..."
          aws iam create-role --role-name lambda-delaware-playwright-role --assume-role-policy-document '{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Principal": { "Service": "lambda.amazonaws.com" }, "Action": "sts:AssumeRole" } ] }' 2>/dev/null || echo "Role already exists"
          aws iam attach-role-policy --role-name lambda-delaware-playwright-role --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole 2>/dev/null || echo "Basic Execution Policy already attached"
          aws iam attach-role-policy --role-name lambda-delaware-playwright-role --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly 2>/dev/null || echo "ECR ReadOnly Policy already attached"
          sleep 10
          aws lambda create-function \
            --function-name $LAMBDA_FUNCTION_NAME \
            --package-type Image \
            --code ImageUri=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG \
            --role arn:aws:iam::$AWS_ACCOUNT_ID:role/lambda-delaware-playwright-role \
            --timeout 300 \
            --memory-size 2048 \
            --region $AWS_DEFAULT_REGION
        fi
      - echo Lambda function deployment completed!
artifacts:
  files:
    - imagedefinitions.json
  name: $(date +%Y-%m-%d)
cache:
  paths:
    - '/root/.cache/**/*'
